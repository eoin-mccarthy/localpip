filter {
# Setup snippet (should precede all other snippets)


# Include snippets

# special cases
# ---------------------------
# Special Case - router logs |
# ---------------------------
if ( [type] == "syslog" and [origin] == "gorouter" and [source_id] == "RTR") {

  mutate {
    add_tag => [ "logmessage-rtr" ]
  }

  grok {
    match => { "message" => [ "%{IPORHOST:[rtr][hostname]} - \[(?<rtr_time>%{MONTHDAY}/%{MONTHNUM}/%{YEAR}:%{TIME} %{INT})\] \"%{WORD:[rtr][verb]} %{NOTSPACE:[rtr][path]} %{DATA:[rtr][http_spec]}\" %{NUMBER:[rtr][status]:int} %{NUMBER:[rtr][request_bytes_received]:int} (?:%{NUMBER:[rtr][body_bytes_sent]:int}|-) \"%{DATA:[rtr][referer]}\"(?:%{SPACE}|;%{SPACE})\"%{DATA:[rtr][http_user_agent]}\" %{HOSTPORT:[rtr][remoteAddr]} x_forwarded_for:\"%{DATA:[rtr][x_forwarded_for]}\"(?:%{SPACE}x_forwarded_proto:\"%{DATA:[rtr][x_forwarded_proto]}\"%{SPACE}|%{SPACE})vcap_request_id:%{DATA:[rtr][vcap_request_id]} response_time:(?:%{NUMBER:[rtr][response_time_sec]:float}|-) app_id:(?:%{NOTSPACE:[rtr][app_id]}|)(?:%{SPACE}x_global_transaction_id:\"%{DATA:[rtr][x_global_transaction_id]}\"|%{SPACE})" , "%{IPORHOST:[rtr][hostname]} - \[(?<rtr_time>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}T%{TIME}%{INT})\] \"%{WORD:[rtr][verb]} %{NOTSPACE:[rtr][path]} %{DATA:[rtr][http_spec]}\" %{NUMBER:[rtr][status]:int} %{NUMBER:[rtr][request_bytes_received]:int} (?:%{NUMBER:[rtr][body_bytes_sent]:int}|-) \"%{DATA:[rtr][referer]}\"(?:%{SPACE}|;%{SPACE})\"%{DATA:[rtr][http_user_agent]}\"(?:%{SPACE}|;%{SPACE})\"%{HOSTPORT:[rtr][remoteAddr]}\"(?:%{SPACE}|;%{SPACE})\"%{HOSTPORT:[rtr][backend_addr]}\"(?:%{SPACE}|;%{SPACE})x_forwarded_for:\"%{DATA:[rtr][x_forwarded_for]}\"(?:%{SPACE}x_forwarded_proto:\"%{DATA:[rtr][x_forwarded_proto]}\"%{SPACE}|%{SPACE})vcap_request_id:\"%{DATA:[rtr][vcap_request_id]}\" response_time:(?:%{NUMBER:[rtr][response_time_sec]:float}|-) app_id:\"%{DATA:[rtr][app_id]}\" app_index:\"%{DATA:[rtr][app_index]}\" (?:%{SPACE}x_global_transaction_id:\"%{DATA:[rtr][x_global_transaction_id]}\"|%{SPACE})" ] }
tag_on_failure => [ "fail/cloudfoundry/app-rtr/grok" ]
  }

  
 if !("fail/cloudfoundry/app-rtr/grok" in [tags]) {

    # Set [timestamp]
    mutate {
      rename => { "rtr_time" => "[rtr][timestamp]" }
    }

    # Set [x_forwarded_for]
    mutate {
      gsub => ["[rtr][x_forwarded_for]","[\s\"]",""] # remove quotes and whitespace
      split => ["[rtr][x_forwarded_for]", ","] # format is client, proxy1, proxy2 ...
    }

    # Set [rtr][remote_addr]
    mutate {
      add_field => ["[rtr][remote_addr]", "%{[rtr][x_forwarded_for][0]}"]
    }
    if [rtr][remote_addr] =~ /([0-9]{1,3}\.){3}[0-9]{1,3}/ {
      geoip {
        source => "[rtr][remote_addr]"
      }
    }

    # Set [response_time_ms]
    ruby {
      code => "event['rtr']['response_time_ms'] = (event['rtr']['response_time_sec']*1000).to_int"
      remove_field => "response_time_sec"
    }

    mutate {
      add_field => [ "temp_msg", "%{[rtr][status]} %{[rtr][verb]} %{[rtr][path]} (%{[rtr][response_time_ms]} ms)"]
    }
    mutate {
      rename => { "temp_msg" => "[rtr][message]" }
    }

    # Set @level (based on HTTP status)
    if [rtr][status] >= 400 {
      mutate {
        replace => { "level" => "ERROR" }
      }
    } else {
      mutate {
        replace => { "level" => "INFO" }
      }
    }
  }

}


# --------------------------------------------------
# Special Case - application logs and JSON parsing |
# --------------------------------------------------
if [type] == "syslog" and ([source_id] == "APP" or [source_id] == "App" or [source_id] == "APP/PROC/WEB") {
  mutate {
    add_tag => [ "log" ]
  }

  # -------- message additional parsing ----------
  # Replace the unicode Null character \u0000 with ""
  # Replace the unicode newline character \u2028 with \n, which Kibana will display as a new line.
  # Seems that passing a string with an actual newline in it is the only way to make gsub work
  mutate {
    gsub => [ "message", '\u2028', "
"
    ]
    gsub => [ "message", '\u0000', ""]
  }

  # Ignore logs with empty msg
  if [message] =~ /^\s*$/ or [message] =~ /^#.*$/ {
    drop { }
  }

  ## ---- Format 1: JSON
  # check if it is JSON
  if [message] =~ /^\s*{".*}\s*$/ {

 #   mutate {
 #     gsub => [
 #      "message", '"@timestamp"\s*:', '"_timestamp":'
 #     ]
 #   }

    # Parse Cloud Foundry application logs as JSON
    json {
      source => "message"
      target => "app"
    }

    if !("_jsonparsefailure" in [tags]) {
      # -------- JSON message fields additional parsing ----------
      # Replace the unicode Null character \u0000 with ""
      # Replace the unicode newline character \u2028 with \n, which Kibana will display as a new line.
      # Seems that passing a string with an actual newline in it is the only way to make gsub work
      mutate {
        gsub => [ "[app][msg]", '\u2028', "
"
        ]
        gsub => [ "[app][msg]", '\u0000', ""]
      }

    } else {

      mutate {
        add_tag => [ "unknown_msg_format" ]
        remove_tag => ["_jsonparsefailure"]
      }
    }

  } else {

    # Try for other common types of logs
    if [message] =~ /^\s*\[CONTAINER\]/ {

      # Tomcat specific parsing (in accordance with https://github.com/cloudfoundry/java-buildpack-support/blob/master/tomcat-logging-support/src/main/java/com/gopivotal/cloudfoundry/tomcat/logging/CloudFoundryFormatter.java)
      grok {
        match => [ "message", "(?m)(?<log_logger>\[CONTAINER\]%{SPACE}%{NOTSPACE})%{SPACE}%{LOGLEVEL:[app][level]}%{SPACE}%{GREEDYDATA:[app][message]}" ]
        tag_on_failure => [ "unknown_msg_format" ]
      }
      mutate {
         rename => { "log_logger" => "[app][logger]" }
      }

    } else {

      ## ---- Format 3: Logback status logs
      grok {
        match => [ "message", "%{TIME} \|\-%{LOGLEVEL:[app][level]} in %{NOTSPACE:[app][logger]} - %{GREEDYDATA:[app][message]}" ]

        ## ---- Unknown Format: otherwise set with 'unknown_msg_format' tag
        tag_on_failure => [ "unknown_msg_format" ]
      }
    }
  }
}


# Teardown snippet (should follow all other snippets)

}
